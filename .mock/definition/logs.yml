imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list:
      path: /logs
      method: GET
      auth: true
      docs: List all Logs for the given filter criteria.
      pagination:
        offset: $request.page
        results: $response.records
      display-name: 'List '
      request:
        name: ListLogsGetRequest
        query-parameters:
          file_id:
            type: string
            docs: Unique identifier for the File to list Logs for.
          page:
            type: optional<integer>
            docs: Page number for pagination.
          size:
            type: optional<integer>
            docs: Page size for pagination. Number of Logs to fetch.
          version_id:
            type: optional<string>
            docs: >-
              If provided, only Logs belonging to the specified Version will be
              returned.
          version_status:
            type: optional<root.VersionStatus>
            docs: >-
              If provided, only Logs belonging to Versions with the specified
              status will be returned.
          search:
            type: optional<string>
            docs: >-
              If provided, only Logs that contain the provided string in its
              inputs and output will be returned.
          metadata_search:
            type: optional<string>
            docs: >-
              If provided, only Logs that contain the provided string in its
              metadata will be returned.
          start_date:
            type: optional<datetime>
            docs: >-
              If provided, only Logs created after the specified date will be
              returned.
          end_date:
            type: optional<datetime>
            docs: >-
              If provided, only Logs created before the specified date will be
              returned.
      response:
        docs: Successful Response
        type: root.PaginatedDataLogResponse
      errors:
        - root.UnprocessableEntityError
      examples:
        - name: List logs
          query-parameters:
            file_id: file_123abc
            size: 1
          response:
            body:
              page: 1
              size: 1
              total: 1
              records:
                - id: log_123efg
                  created_at: '2024-05-01T12:00:00Z'
                  output: This is a sample output.
                  prompt:
                    id: pr_123abc
                    name: Test Prompt
                    path: test-prompt
                    version_id: pv_456def
                    created_at: '2024-05-01T12:00:00Z'
                    updated_at: '2024-05-01T12:00:00Z'
                    status: committed
                    last_used_at: '2024-05-01T12:00:00Z'
                    model: gpt-4
                    version_logs_count: 1
                    total_logs_count: 1
                    inputs:
                      - name: question
    delete:
      path: /logs
      method: DELETE
      auth: true
      docs: Delete Logs with the given IDs.
      display-name: Delete
      request:
        name: LogsDeleteRequest
        query-parameters:
          id:
            type: optional<string>
            allow-multiple: true
            docs: Unique identifiers for the Logs to delete.
      errors:
        - root.UnprocessableEntityError
    get:
      path: /logs/{id}
      method: GET
      auth: true
      docs: Retrieve the Log with the given ID.
      path-parameters:
        id:
          type: string
          docs: Unique identifier for Log.
      display-name: Get Log
      response:
        docs: Successful Response
        type: root.SrcExternalAppModelsV5LogsLogResponse
      errors:
        - root.UnprocessableEntityError
      examples:
        - name: Get log
          path-parameters:
            id: prv_Wu6zx1lAWJRqOyL8nWuZk
          response:
            body:
              id: log_123efg
              created_at: '2024-05-01T12:00:00Z'
              output: This is a sample output.
              prompt:
                id: pr_123abc
                name: Test Prompt
                path: test-prompt
                version_id: pv_456def
                created_at: '2024-05-01T12:00:00Z'
                updated_at: '2024-05-01T12:00:00Z'
                status: committed
                last_used_at: '2024-05-01T12:00:00Z'
                model: gpt-4
                version_logs_count: 1
                total_logs_count: 1
                inputs:
                  - name: question
  display-name: Logs
docs: >+
  Logs contain the inputs and outputs of each time a Prompt, Tool or Evaluator
  is called.


  Humanloop automatically records the inputs and outputs when you Call a Prompt
  or Tool and saves a Log.

  Evaluator Logs are also created when an Evaluator is run on a Log.


  You can manually create Logs through the API.


  ...


