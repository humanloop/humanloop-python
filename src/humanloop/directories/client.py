# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawDirectoriesClient
from ..core.request_options import RequestOptions
from ..types.directory_response import DirectoryResponse
from ..types.directory_with_parents_and_children_response import DirectoryWithParentsAndChildrenResponse
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawDirectoriesClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DirectoriesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawDirectoriesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawDirectoriesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawDirectoriesClient
        """
        return self._raw_client

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[DirectoryResponse]:
        """
        Retrieve a list of all Directories.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[DirectoryResponse]
            Successful Response

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.directories.list()
        """
        response = self._raw_client.list(request_options=request_options)
        return response.data

    def create(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        parent_id: typing.Optional[str] = OMIT,
        path: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DirectoryResponse:
        """
        Creates a Directory.

        Parameters
        ----------
        name : typing.Optional[str]
            Name of the directory to create.

        parent_id : typing.Optional[str]
            ID of the parent directory. Starts with `dir_`.

        path : typing.Optional[str]
            Path to create the directory in, relative to the root directory. If the path does not exist, it will be created. Includes name, e.g. `path/to/directory`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DirectoryResponse
            Successful Response

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.directories.create()
        """
        response = self._raw_client.create(name=name, parent_id=parent_id, path=path, request_options=request_options)
        return response.data

    def get(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DirectoryWithParentsAndChildrenResponse:
        """
        Fetches a directory by ID.

        Parameters
        ----------
        id : str
            String ID of directory. Starts with `dir_`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DirectoryWithParentsAndChildrenResponse
            Successful Response

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.directories.get(
            id="id",
        )
        """
        response = self._raw_client.get(id, request_options=request_options)
        return response.data

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete the Directory with the given ID.

        The Directory must be empty (i.e. contain no Directories or Files).

        Parameters
        ----------
        id : str
            Unique identifier for Directory. Starts with `dir_`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.directories.delete(
            id="id",
        )
        """
        response = self._raw_client.delete(id, request_options=request_options)
        return response.data

    def update(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        parent_id: typing.Optional[str] = OMIT,
        path: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DirectoryResponse:
        """
        Update the Directory with the given ID.

        Parameters
        ----------
        id : str
            Unique identifier for Directory. Starts with `dir_`.

        name : typing.Optional[str]
            Name to set for the directory.

        parent_id : typing.Optional[str]
            ID of the parent directory. Specify this to move directories. Starts with `dir_`.

        path : typing.Optional[str]
            Path to move the directory to, relative to the root directory. Specify this to move directories. Includes name, e.g. `path/to/directory`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DirectoryResponse
            Successful Response

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.directories.update(
            id="id",
        )
        """
        response = self._raw_client.update(
            id, name=name, parent_id=parent_id, path=path, request_options=request_options
        )
        return response.data


class AsyncDirectoriesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawDirectoriesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawDirectoriesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawDirectoriesClient
        """
        return self._raw_client

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[DirectoryResponse]:
        """
        Retrieve a list of all Directories.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[DirectoryResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.directories.list()


        asyncio.run(main())
        """
        response = await self._raw_client.list(request_options=request_options)
        return response.data

    async def create(
        self,
        *,
        name: typing.Optional[str] = OMIT,
        parent_id: typing.Optional[str] = OMIT,
        path: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DirectoryResponse:
        """
        Creates a Directory.

        Parameters
        ----------
        name : typing.Optional[str]
            Name of the directory to create.

        parent_id : typing.Optional[str]
            ID of the parent directory. Starts with `dir_`.

        path : typing.Optional[str]
            Path to create the directory in, relative to the root directory. If the path does not exist, it will be created. Includes name, e.g. `path/to/directory`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DirectoryResponse
            Successful Response

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.directories.create()


        asyncio.run(main())
        """
        response = await self._raw_client.create(
            name=name, parent_id=parent_id, path=path, request_options=request_options
        )
        return response.data

    async def get(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DirectoryWithParentsAndChildrenResponse:
        """
        Fetches a directory by ID.

        Parameters
        ----------
        id : str
            String ID of directory. Starts with `dir_`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DirectoryWithParentsAndChildrenResponse
            Successful Response

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.directories.get(
                id="id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get(id, request_options=request_options)
        return response.data

    async def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete the Directory with the given ID.

        The Directory must be empty (i.e. contain no Directories or Files).

        Parameters
        ----------
        id : str
            Unique identifier for Directory. Starts with `dir_`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.directories.delete(
                id="id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.delete(id, request_options=request_options)
        return response.data

    async def update(
        self,
        id: str,
        *,
        name: typing.Optional[str] = OMIT,
        parent_id: typing.Optional[str] = OMIT,
        path: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DirectoryResponse:
        """
        Update the Directory with the given ID.

        Parameters
        ----------
        id : str
            Unique identifier for Directory. Starts with `dir_`.

        name : typing.Optional[str]
            Name to set for the directory.

        parent_id : typing.Optional[str]
            ID of the parent directory. Specify this to move directories. Starts with `dir_`.

        path : typing.Optional[str]
            Path to move the directory to, relative to the root directory. Specify this to move directories. Includes name, e.g. `path/to/directory`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DirectoryResponse
            Successful Response

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.directories.update(
                id="id",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.update(
            id, name=name, parent_id=parent_id, path=path, request_options=request_options
        )
        return response.data
