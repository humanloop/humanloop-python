# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .dataset_response import DatasetResponse
from .evaluation_status import EvaluationStatus
from .run_version_response import RunVersionResponse
from .user_response import UserResponse


class EvaluationRunResponse(UncheckedBaseModel):
    id: str = pydantic.Field()
    """
    Unique identifier for the Run.
    """

    dataset: typing.Optional[DatasetResponse] = pydantic.Field(default=None)
    """
    The Dataset used in the Run.
    """

    version: typing.Optional[RunVersionResponse] = pydantic.Field(default=None)
    """
    The version used in the Run.
    """

    orchestrated: bool = pydantic.Field()
    """
    Whether the Run is orchestrated by Humanloop.
    """

    added_at: dt.datetime = pydantic.Field()
    """
    When the Run was added to the Evaluation.
    """

    created_at: dt.datetime = pydantic.Field()
    """
    When the Run was created.
    """

    created_by: typing.Optional[UserResponse] = pydantic.Field(default=None)
    """
    The User who created the Run.
    """

    status: EvaluationStatus = pydantic.Field()
    """
    The status of the Run.
    """

    control: bool = pydantic.Field()
    """
    Stats for other Runs will be displayed in comparison to the control Run.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
