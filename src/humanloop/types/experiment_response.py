# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .base_metric_response import BaseMetricResponse
from .experiment_status import ExperimentStatus
from .experiment_version_response import ExperimentVersionResponse
from .positive_label import PositiveLabel


class ExperimentResponse(UncheckedBaseModel):
    id: str = pydantic.Field()
    """
    String ID of experiment. Starts with `exp_`.
    """

    file_id: str = pydantic.Field()
    """
    String ID of file the experiment belongs to.
    """

    name: str = pydantic.Field()
    """
    Name of experiment.
    """

    status: ExperimentStatus = pydantic.Field()
    """
    Status of experiment.
    """

    versions: typing.Optional[typing.List[ExperimentVersionResponse]] = pydantic.Field(default=None)
    """
    List of Versions associated to the experiment.
    """

    metric: BaseMetricResponse = pydantic.Field()
    """
    Metric used as the experiment's objective.
    """

    positive_labels: typing.List[PositiveLabel] = pydantic.Field()
    """
    Feedback labels to treat as positive user feedback. Used to monitor the performance of model configs in the experiment.
    """

    created_at: dt.datetime
    updated_at: dt.datetime

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
