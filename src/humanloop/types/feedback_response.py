# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .feedback_response_type import FeedbackResponseType
from .feedback_response_value import FeedbackResponseValue


class FeedbackResponse(UncheckedBaseModel):
    type: FeedbackResponseType = pydantic.Field()
    """
    The type of feedback. The default feedback types available are 'rating', 'action', 'issue', 'correction', and 'comment'.
    """

    value: FeedbackResponseValue = pydantic.Field()
    """
    The feedback value to set. This would be the appropriate text for 'correction' or 'comment', or a label to apply for 'rating', 'action', or 'issue'.
    """

    data_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    ID to associate the feedback to a previously logged datapoint.
    """

    user: typing.Optional[str] = pydantic.Field(default=None)
    """
    A unique identifier to who provided the feedback.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    User defined timestamp for when the feedback was created.
    """

    id: str = pydantic.Field()
    """
    String ID of user feedback. Starts with `ann_`, short for annotation.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
