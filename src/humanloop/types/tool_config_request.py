# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .tool_source import ToolSource


class ToolConfigRequest(UncheckedBaseModel):
    """
    Definition of tool within a model config.

    The subset of ToolConfig parameters received by the chat endpoint.
    Does not have things like the signature or setup schema.
    """

    name: str = pydantic.Field()
    """
    The name of the tool shown to the model.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    The description of the tool shown to the model.
    """

    parameters: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(default=None)
    """
    Definition of parameters needed to run the tool. Provided in jsonschema format: https://json-schema.org/
    """

    source: typing.Optional[ToolSource] = pydantic.Field(default=None)
    """
    Source of the tool. If defined at an organization level will be 'organization' else 'inline'.
    """

    source_code: typing.Optional[str] = pydantic.Field(default=None)
    """
    Code source of the tool.
    """

    other: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(default=None)
    """
    Other parameters that define the config.
    """

    preset_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    If is_preset = true, this is the name of the preset tool on Humanloop. This is used as the key to look up the Humanloop runtime of the tool
    """

    type: typing.Literal["tool"] = "tool"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
