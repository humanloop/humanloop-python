# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.unchecked_base_model import UncheckedBaseModel
from .chat_message_with_tool_call_content import ChatMessageWithToolCallContent
from .chat_role import ChatRole
from .function_tool import FunctionTool
from .tool_call import ToolCall


class ChatMessageWithToolCall(UncheckedBaseModel):
    content: typing.Optional[ChatMessageWithToolCallContent] = pydantic.Field(default=None)
    """
    The content of the message.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Optional name of the message author.
    """

    tool_call_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Tool call that this message is responding to.
    """

    role: ChatRole = pydantic.Field()
    """
    Role of the message author.
    """

    tool_calls: typing.Optional[typing.List[ToolCall]] = pydantic.Field(default=None)
    """
    A list of tool calls requested by the assistant.
    """

    tool_call: typing.Optional[FunctionTool] = pydantic.Field(default=None)
    """
    NB: Deprecated in favour of tool_calls. A tool call requested by the assistant.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
