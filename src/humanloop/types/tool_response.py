# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, update_forward_refs
from ..core.unchecked_base_model import UncheckedBaseModel
from .environment_response import EnvironmentResponse
from .evaluator_aggregate import EvaluatorAggregate
from .files_tool_type import FilesToolType
from .input_response import InputResponse
from .tool_function import ToolFunction
from .user_response import UserResponse


class ToolResponse(UncheckedBaseModel):
    """
    Base type that all File Responses should inherit from.

    Attributes defined here are common to all File Responses and should be overridden
    in the inheriting classes with documentation and appropriate Field definitions.
    """

    path: str = pydantic.Field()
    """
    Path of the Tool, including the name, which is used as a unique identifier.
    """

    id: str = pydantic.Field()
    """
    Unique identifier for the Tool.
    """

    directory_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    ID of the directory that the file is in on Humanloop.
    """

    function: typing.Optional[ToolFunction] = pydantic.Field(default=None)
    """
    Callable function specification of the Tool shown to the model for tool calling.
    """

    source_code: typing.Optional[str] = pydantic.Field(default=None)
    """
    Code source of the Tool.
    """

    setup_values: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Values needed to setup the Tool, defined in JSON Schema format: https://json-schema.org/
    """

    attributes: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Additional fields to describe the Tool. Helpful to separate Tool versions from each other with details on how they were created or used.
    """

    tool_type: typing.Optional[FilesToolType] = pydantic.Field(default=None)
    """
    Type of Tool.
    """

    version_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Unique identifier for this Tool version. Each Tool can only have one version with a given name.
    """

    version_description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Description of the Version.
    """

    name: str = pydantic.Field()
    """
    Name of the Tool, which is used as a unique identifier.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Description of the Tool.
    """

    readme: typing.Optional[str] = pydantic.Field(default=None)
    """
    Long description of the file.
    """

    tags: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    List of tags associated with the file.
    """

    version_id: str = pydantic.Field()
    """
    Unique identifier for the specific Tool Version. If no query params provided, the default deployed Tool Version is returned.
    """

    type: typing.Optional[typing.Literal["tool"]] = None
    environments: typing.Optional[typing.List[EnvironmentResponse]] = pydantic.Field(default=None)
    """
    The list of environments the Tool Version is deployed to.
    """

    created_at: dt.datetime
    updated_at: dt.datetime
    created_by: typing.Optional[UserResponse] = pydantic.Field(default=None)
    """
    The user who created the Tool.
    """

    last_used_at: dt.datetime
    version_logs_count: int = pydantic.Field()
    """
    The number of logs that have been generated for this Tool Version
    """

    total_logs_count: int = pydantic.Field()
    """
    The number of logs that have been generated across all Tool Versions
    """

    inputs: typing.List[InputResponse] = pydantic.Field()
    """
    Inputs associated to the Prompt. Inputs correspond to any of the variables used within the Tool template.
    """

    evaluators: typing.Optional[typing.List["MonitoringEvaluatorResponse"]] = pydantic.Field(default=None)
    """
    Evaluators that have been attached to this Tool that are used for monitoring logs.
    """

    signature: typing.Optional[str] = pydantic.Field(default=None)
    """
    Signature of the Tool.
    """

    evaluator_aggregates: typing.Optional[typing.List[EvaluatorAggregate]] = pydantic.Field(default=None)
    """
    Aggregation of Evaluator results for the Tool Version.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .evaluator_response import EvaluatorResponse  # noqa: E402, F401, I001
from .flow_response import FlowResponse  # noqa: E402, F401, I001
from .monitoring_evaluator_response import MonitoringEvaluatorResponse  # noqa: E402, F401, I001
from .prompt_response import PromptResponse  # noqa: E402, F401, I001
from .version_deployment_response import VersionDeploymentResponse  # noqa: E402, F401, I001
from .version_id_response import VersionIdResponse  # noqa: E402, F401, I001

update_forward_refs(ToolResponse)
