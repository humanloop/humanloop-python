# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.project_sort_by import ProjectSortBy
from ..types.sort_order import SortOrder
from ..core.request_options import RequestOptions
from ..core.pagination import SyncPager
from ..types.dataset_response import DatasetResponse
from ..types.paginated_dataset_response import PaginatedDatasetResponse
from ..core.unchecked_base_model import construct_type
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..requests.create_datapoint_request import CreateDatapointRequestParams
from ..types.update_dateset_action import UpdateDatesetAction
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.jsonable_encoder import jsonable_encoder
from ..types.datapoint_response import DatapointResponse
from ..types.paginated_datapoint_response import PaginatedDatapointResponse
from ..types.version_status import VersionStatus
from ..types.list_datasets import ListDatasets
from .. import core
from ..types.file_environment_response import FileEnvironmentResponse
from ..core.client_wrapper import AsyncClientWrapper
from ..core.pagination import AsyncPager

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DatasetsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        name: typing.Optional[str] = None,
        user_filter: typing.Optional[str] = None,
        sort_by: typing.Optional[ProjectSortBy] = None,
        order: typing.Optional[SortOrder] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[DatasetResponse]:
        """
        List all Datasets.

        Parameters
        ----------
        page : typing.Optional[int]
            Page offset for pagination.

        size : typing.Optional[int]
            Page size for pagination. Number of Datasets to fetch.

        name : typing.Optional[str]
            Case-insensitive filter for Dataset name.

        user_filter : typing.Optional[str]
            Case-insensitive filter for users in the Dataset. This filter matches against both email address and name of users.

        sort_by : typing.Optional[ProjectSortBy]
            Field to sort Datasets by

        order : typing.Optional[SortOrder]
            Direction to sort by.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[DatasetResponse]
            Successful Response

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        response = client.datasets.list(
            size=1,
        )
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        page = page if page is not None else 1
        _response = self._client_wrapper.httpx_client.request(
            "datasets",
            method="GET",
            params={
                "page": page,
                "size": size,
                "name": name,
                "user_filter": user_filter,
                "sort_by": sort_by,
                "order": order,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    PaginatedDatasetResponse,
                    construct_type(
                        type_=PaginatedDatasetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list(
                    page=page + 1,
                    size=size,
                    name=name,
                    user_filter=user_filter,
                    sort_by=sort_by,
                    order=order,
                    request_options=request_options,
                )
                _items = _parsed_response.records
                return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def upsert(
        self,
        *,
        datapoints: typing.Sequence[CreateDatapointRequestParams],
        version_id: typing.Optional[str] = None,
        environment: typing.Optional[str] = None,
        include_datapoints: typing.Optional[bool] = None,
        path: typing.Optional[str] = OMIT,
        id: typing.Optional[str] = OMIT,
        action: typing.Optional[UpdateDatesetAction] = OMIT,
        attributes: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        commit_message: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DatasetResponse:
        """
        Create a Dataset or update it with a new version if it already exists.

        Datasets are identified by the `ID` or their `path`. The datapoints determine the versions of the Dataset.

        By default, the new Dataset version will be set to the list of Datapoints provided in
        the request. You can also create a new version by adding or removing Datapoints from an existing version
        by specifying `action` as `add` or `remove` respectively. In this case, you may specify
        the `version_id` or `environment` query parameters to identify the existing version to base
        the new version on. If neither is provided, the default deployed version will be used.

        If you provide a commit message, then the new version will be committed;
        otherwise it will be uncommitted. If you try to commit an already committed version,
        an exception will be raised.

        Humanloop also deduplicates Datapoints. If you try to add a Datapoint that already
        exists, it will be ignored. If you intentionally want to add a duplicate Datapoint,
        you can add a unique identifier to the Datapoint's inputs such as `{_dedupe_id: <unique ID>}`.

        Parameters
        ----------
        datapoints : typing.Sequence[CreateDatapointRequestParams]
            The Datapoints to create this Dataset version with. Modify the `action` field to determine how these Datapoints are used.

        version_id : typing.Optional[str]
            ID of the specific Dataset version to base the created Version on. Only used when `action` is `"add"` or `"remove"`.

        environment : typing.Optional[str]
            Name of the Environment identifying a deployed Version to base the created Version on. Only used when `action` is `"add"` or `"remove"`.

        include_datapoints : typing.Optional[bool]
            If set to `true`, include all Datapoints in the response. Defaults to `false`. Consider using the paginated List Datapoints endpoint instead.

        path : typing.Optional[str]
            Path of the Dataset, including the name. This locates the Dataset in the Humanloop filesystem and is used as as a unique identifier. For example: `folder/name` or just `name`.

        id : typing.Optional[str]
            ID for an existing Dataset.

        action : typing.Optional[UpdateDatesetAction]
            The action to take with the provided Datapoints.

             - If `"set"`, the created version will only contain the Datapoints provided in this request.
             - If `"add"`, the created version will contain the Datapoints provided in this request in addition to the Datapoints in the target version.
             - If `"remove"`, the created version will contain the Datapoints in the target version except for the Datapoints provided in this request.

            If `"add"` or `"remove"`, one of the `version_id` or `environment` query parameters may be provided.

        attributes : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Additional fields to describe the Dataset. Helpful to separate Dataset versions from each other with details on how they were created or used.

        commit_message : typing.Optional[str]
            Message describing the changes made. If provided, a committed version of the Dataset is created. Otherwise, an uncommitted version is created.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetResponse
            Successful Response

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.datasets.upsert(
            path="test-questions",
            datapoints=[
                {
                    "inputs": {"question": "What is the capital of France?"},
                    "target": {"answer": "Paris"},
                },
                {
                    "inputs": {"question": "Who wrote Hamlet?"},
                    "target": {"answer": "William Shakespeare"},
                },
            ],
            action="set",
            commit_message="Add two new questions and answers",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "datasets",
            method="POST",
            params={
                "version_id": version_id,
                "environment": environment,
                "include_datapoints": include_datapoints,
            },
            json={
                "path": path,
                "id": id,
                "datapoints": convert_and_respect_annotation_metadata(
                    object_=datapoints, annotation=typing.Sequence[CreateDatapointRequestParams], direction="write"
                ),
                "action": action,
                "attributes": attributes,
                "commit_message": commit_message,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DatasetResponse,
                    construct_type(
                        type_=DatasetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self,
        id: str,
        *,
        version_id: typing.Optional[str] = None,
        environment: typing.Optional[str] = None,
        include_datapoints: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DatasetResponse:
        """
        Retrieve the Dataset with the given ID.

        Unless `include_datapoints` is set to `true`, the response will not include
        the Datapoints.
        Use the List Datapoints endpoint (`GET /{id}/datapoints`) to efficiently
        retrieve Datapoints for a large Dataset.

        By default, the deployed version of the Dataset is returned. Use the query parameters
        `version_id` or `environment` to target a specific version of the Dataset.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        version_id : typing.Optional[str]
            A specific Version ID of the Dataset to retrieve.

        environment : typing.Optional[str]
            Name of the Environment to retrieve a deployed Version from.

        include_datapoints : typing.Optional[bool]
            If set to `true`, include all Datapoints in the response. Defaults to `false`. Consider using the paginated List Datapoints endpoint instead.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetResponse
            Successful Response

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.datasets.get(
            id="ds_b0baF1ca7652",
            version_id="dsv_6L78pqrdFi2xa",
            include_datapoints=True,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}",
            method="GET",
            params={
                "version_id": version_id,
                "environment": environment,
                "include_datapoints": include_datapoints,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DatasetResponse,
                    construct_type(
                        type_=DatasetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete the Dataset with the given ID.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.datasets.delete(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def move(
        self,
        id: str,
        *,
        path: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DatasetResponse:
        """
        Move the Dataset to a different path or change the name.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        path : typing.Optional[str]
            Path of the Dataset including the Dataset name, which is used as a unique identifier.

        name : typing.Optional[str]
            Name of the Dataset, which is used as a unique identifier.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetResponse
            Successful Response

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.datasets.move(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "path": path,
                "name": name,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DatasetResponse,
                    construct_type(
                        type_=DatasetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_datapoints(
        self,
        id: str,
        *,
        version_id: typing.Optional[str] = None,
        environment: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[DatapointResponse]:
        """
        List all Datapoints for the Dataset with the given ID.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        version_id : typing.Optional[str]
            A specific Version ID of the Dataset to retrieve.

        environment : typing.Optional[str]
            Name of the Environment to retrieve a deployed Version from.

        page : typing.Optional[int]
            Page number for pagination.

        size : typing.Optional[int]
            Page size for pagination. Number of Datapoints to fetch.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[DatapointResponse]
            Successful Response

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        response = client.datasets.list_datapoints(
            id="ds_b0baF1ca7652",
            size=1,
        )
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        page = page if page is not None else 1
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/datapoints",
            method="GET",
            params={
                "version_id": version_id,
                "environment": environment,
                "page": page,
                "size": size,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    PaginatedDatapointResponse,
                    construct_type(
                        type_=PaginatedDatapointResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list_datapoints(
                    id,
                    version_id=version_id,
                    environment=environment,
                    page=page + 1,
                    size=size,
                    request_options=request_options,
                )
                _items = _parsed_response.records
                return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_versions(
        self,
        id: str,
        *,
        status: typing.Optional[VersionStatus] = None,
        include_datapoints: typing.Optional[typing.Literal["latest_committed"]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListDatasets:
        """
        Get a list of the versions for a Dataset.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        status : typing.Optional[VersionStatus]
            Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned.

        include_datapoints : typing.Optional[typing.Literal["latest_committed"]]
            If set to 'latest_committed', include the Datapoints for the latest committed version. Defaults to `None`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDatasets
            Successful Response

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.datasets.list_versions(
            id="ds_b0baF1ca7652",
            status="committed",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/versions",
            method="GET",
            params={
                "status": status,
                "include_datapoints": include_datapoints,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListDatasets,
                    construct_type(
                        type_=ListDatasets,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def commit(
        self, id: str, version_id: str, *, commit_message: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DatasetResponse:
        """
        Commit a version of the Dataset with a commit message.

        If the version is already committed, an exception will be raised.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        version_id : str
            Unique identifier for the specific version of the Dataset.

        commit_message : str
            Message describing the changes made.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetResponse
            Successful Response

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.datasets.commit(
            id="ds_b0baF1ca7652",
            version_id="dsv_6L78pqrdFi2xa",
            commit_message="initial commit",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/versions/{jsonable_encoder(version_id)}/commit",
            method="POST",
            json={
                "commit_message": commit_message,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DatasetResponse,
                    construct_type(
                        type_=DatasetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_dataset_version(
        self, id: str, version_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a version of the Dataset.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        version_id : str
            Unique identifier for the specific version of the Dataset.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.datasets.delete_dataset_version(
            id="id",
            version_id="version_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/versions/{jsonable_encoder(version_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def upload_csv(
        self,
        id: str,
        *,
        file: core.File,
        commit_message: str,
        version_id: typing.Optional[str] = None,
        environment: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DatasetResponse:
        """
        Add Datapoints from a CSV file to a Dataset.

        This will create a new committed version of the Dataset with the Datapoints from the CSV file.

        If either `version_id` or `environment` is provided, the new version will be based on the specified version,
        with the Datapoints from the CSV file added to the existing Datapoints in the version.
        If neither `version_id` nor `environment` is provided, the new version will be based on the version
        of the Dataset that is deployed to the default Environment.

        Parameters
        ----------
        id : str
            Unique identifier for the Dataset

        file : core.File
            See core.File for more documentation

        commit_message : str
            Commit message for the new Dataset version.

        version_id : typing.Optional[str]
            ID of the specific Dataset version to base the created Version on.

        environment : typing.Optional[str]
            Name of the Environment identifying a deployed Version to base the created Version on.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetResponse
            Successful Response

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.datasets.upload_csv(
            id="id",
            commit_message="commit_message",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/datapoints/csv",
            method="POST",
            params={
                "version_id": version_id,
                "environment": environment,
            },
            data={
                "commit_message": commit_message,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DatasetResponse,
                    construct_type(
                        type_=DatasetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def set_deployment(
        self, id: str, environment_id: str, *, version_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DatasetResponse:
        """
        Deploy Dataset to Environment.

        Set the deployed version for the specified Environment.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        environment_id : str
            Unique identifier for the Environment to deploy the Version to.

        version_id : str
            Unique identifier for the specific version of the Dataset.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetResponse
            Successful Response

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.datasets.set_deployment(
            id="ds_b0baF1ca7652",
            environment_id="staging",
            version_id="dsv_6L78pqrdFi2xa",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/environments/{jsonable_encoder(environment_id)}",
            method="POST",
            params={
                "version_id": version_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DatasetResponse,
                    construct_type(
                        type_=DatasetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def remove_deployment(
        self, id: str, environment_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Remove deployed Dataset from Environment.

        Remove the deployed version for the specified Environment.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        environment_id : str
            Unique identifier for the Environment to remove the deployment from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.datasets.remove_deployment(
            id="ds_b0baF1ca7652",
            environment_id="staging",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/environments/{jsonable_encoder(environment_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_environments(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[FileEnvironmentResponse]:
        """
        List all Environments and their deployed versions for the Dataset.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[FileEnvironmentResponse]
            Successful Response

        Examples
        --------
        from humanloop import Humanloop

        client = Humanloop(
            api_key="YOUR_API_KEY",
        )
        client.datasets.list_environments(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/environments",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[FileEnvironmentResponse],
                    construct_type(
                        type_=typing.List[FileEnvironmentResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDatasetsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        name: typing.Optional[str] = None,
        user_filter: typing.Optional[str] = None,
        sort_by: typing.Optional[ProjectSortBy] = None,
        order: typing.Optional[SortOrder] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[DatasetResponse]:
        """
        List all Datasets.

        Parameters
        ----------
        page : typing.Optional[int]
            Page offset for pagination.

        size : typing.Optional[int]
            Page size for pagination. Number of Datasets to fetch.

        name : typing.Optional[str]
            Case-insensitive filter for Dataset name.

        user_filter : typing.Optional[str]
            Case-insensitive filter for users in the Dataset. This filter matches against both email address and name of users.

        sort_by : typing.Optional[ProjectSortBy]
            Field to sort Datasets by

        order : typing.Optional[SortOrder]
            Direction to sort by.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[DatasetResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            response = await client.datasets.list(
                size=1,
            )
            async for item in response:
                yield item
            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        page = page if page is not None else 1
        _response = await self._client_wrapper.httpx_client.request(
            "datasets",
            method="GET",
            params={
                "page": page,
                "size": size,
                "name": name,
                "user_filter": user_filter,
                "sort_by": sort_by,
                "order": order,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    PaginatedDatasetResponse,
                    construct_type(
                        type_=PaginatedDatasetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list(
                    page=page + 1,
                    size=size,
                    name=name,
                    user_filter=user_filter,
                    sort_by=sort_by,
                    order=order,
                    request_options=request_options,
                )
                _items = _parsed_response.records
                return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def upsert(
        self,
        *,
        datapoints: typing.Sequence[CreateDatapointRequestParams],
        version_id: typing.Optional[str] = None,
        environment: typing.Optional[str] = None,
        include_datapoints: typing.Optional[bool] = None,
        path: typing.Optional[str] = OMIT,
        id: typing.Optional[str] = OMIT,
        action: typing.Optional[UpdateDatesetAction] = OMIT,
        attributes: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        commit_message: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DatasetResponse:
        """
        Create a Dataset or update it with a new version if it already exists.

        Datasets are identified by the `ID` or their `path`. The datapoints determine the versions of the Dataset.

        By default, the new Dataset version will be set to the list of Datapoints provided in
        the request. You can also create a new version by adding or removing Datapoints from an existing version
        by specifying `action` as `add` or `remove` respectively. In this case, you may specify
        the `version_id` or `environment` query parameters to identify the existing version to base
        the new version on. If neither is provided, the default deployed version will be used.

        If you provide a commit message, then the new version will be committed;
        otherwise it will be uncommitted. If you try to commit an already committed version,
        an exception will be raised.

        Humanloop also deduplicates Datapoints. If you try to add a Datapoint that already
        exists, it will be ignored. If you intentionally want to add a duplicate Datapoint,
        you can add a unique identifier to the Datapoint's inputs such as `{_dedupe_id: <unique ID>}`.

        Parameters
        ----------
        datapoints : typing.Sequence[CreateDatapointRequestParams]
            The Datapoints to create this Dataset version with. Modify the `action` field to determine how these Datapoints are used.

        version_id : typing.Optional[str]
            ID of the specific Dataset version to base the created Version on. Only used when `action` is `"add"` or `"remove"`.

        environment : typing.Optional[str]
            Name of the Environment identifying a deployed Version to base the created Version on. Only used when `action` is `"add"` or `"remove"`.

        include_datapoints : typing.Optional[bool]
            If set to `true`, include all Datapoints in the response. Defaults to `false`. Consider using the paginated List Datapoints endpoint instead.

        path : typing.Optional[str]
            Path of the Dataset, including the name. This locates the Dataset in the Humanloop filesystem and is used as as a unique identifier. For example: `folder/name` or just `name`.

        id : typing.Optional[str]
            ID for an existing Dataset.

        action : typing.Optional[UpdateDatesetAction]
            The action to take with the provided Datapoints.

             - If `"set"`, the created version will only contain the Datapoints provided in this request.
             - If `"add"`, the created version will contain the Datapoints provided in this request in addition to the Datapoints in the target version.
             - If `"remove"`, the created version will contain the Datapoints in the target version except for the Datapoints provided in this request.

            If `"add"` or `"remove"`, one of the `version_id` or `environment` query parameters may be provided.

        attributes : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Additional fields to describe the Dataset. Helpful to separate Dataset versions from each other with details on how they were created or used.

        commit_message : typing.Optional[str]
            Message describing the changes made. If provided, a committed version of the Dataset is created. Otherwise, an uncommitted version is created.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetResponse
            Successful Response

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.datasets.upsert(
                path="test-questions",
                datapoints=[
                    {
                        "inputs": {"question": "What is the capital of France?"},
                        "target": {"answer": "Paris"},
                    },
                    {
                        "inputs": {"question": "Who wrote Hamlet?"},
                        "target": {"answer": "William Shakespeare"},
                    },
                ],
                action="set",
                commit_message="Add two new questions and answers",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "datasets",
            method="POST",
            params={
                "version_id": version_id,
                "environment": environment,
                "include_datapoints": include_datapoints,
            },
            json={
                "path": path,
                "id": id,
                "datapoints": convert_and_respect_annotation_metadata(
                    object_=datapoints, annotation=typing.Sequence[CreateDatapointRequestParams], direction="write"
                ),
                "action": action,
                "attributes": attributes,
                "commit_message": commit_message,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DatasetResponse,
                    construct_type(
                        type_=DatasetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self,
        id: str,
        *,
        version_id: typing.Optional[str] = None,
        environment: typing.Optional[str] = None,
        include_datapoints: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DatasetResponse:
        """
        Retrieve the Dataset with the given ID.

        Unless `include_datapoints` is set to `true`, the response will not include
        the Datapoints.
        Use the List Datapoints endpoint (`GET /{id}/datapoints`) to efficiently
        retrieve Datapoints for a large Dataset.

        By default, the deployed version of the Dataset is returned. Use the query parameters
        `version_id` or `environment` to target a specific version of the Dataset.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        version_id : typing.Optional[str]
            A specific Version ID of the Dataset to retrieve.

        environment : typing.Optional[str]
            Name of the Environment to retrieve a deployed Version from.

        include_datapoints : typing.Optional[bool]
            If set to `true`, include all Datapoints in the response. Defaults to `false`. Consider using the paginated List Datapoints endpoint instead.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetResponse
            Successful Response

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.datasets.get(
                id="ds_b0baF1ca7652",
                version_id="dsv_6L78pqrdFi2xa",
                include_datapoints=True,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}",
            method="GET",
            params={
                "version_id": version_id,
                "environment": environment,
                "include_datapoints": include_datapoints,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DatasetResponse,
                    construct_type(
                        type_=DatasetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete the Dataset with the given ID.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.datasets.delete(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def move(
        self,
        id: str,
        *,
        path: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DatasetResponse:
        """
        Move the Dataset to a different path or change the name.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        path : typing.Optional[str]
            Path of the Dataset including the Dataset name, which is used as a unique identifier.

        name : typing.Optional[str]
            Name of the Dataset, which is used as a unique identifier.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetResponse
            Successful Response

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.datasets.move(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "path": path,
                "name": name,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DatasetResponse,
                    construct_type(
                        type_=DatasetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_datapoints(
        self,
        id: str,
        *,
        version_id: typing.Optional[str] = None,
        environment: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[DatapointResponse]:
        """
        List all Datapoints for the Dataset with the given ID.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        version_id : typing.Optional[str]
            A specific Version ID of the Dataset to retrieve.

        environment : typing.Optional[str]
            Name of the Environment to retrieve a deployed Version from.

        page : typing.Optional[int]
            Page number for pagination.

        size : typing.Optional[int]
            Page size for pagination. Number of Datapoints to fetch.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[DatapointResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            response = await client.datasets.list_datapoints(
                id="ds_b0baF1ca7652",
                size=1,
            )
            async for item in response:
                yield item
            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        page = page if page is not None else 1
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/datapoints",
            method="GET",
            params={
                "version_id": version_id,
                "environment": environment,
                "page": page,
                "size": size,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    PaginatedDatapointResponse,
                    construct_type(
                        type_=PaginatedDatapointResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list_datapoints(
                    id,
                    version_id=version_id,
                    environment=environment,
                    page=page + 1,
                    size=size,
                    request_options=request_options,
                )
                _items = _parsed_response.records
                return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_versions(
        self,
        id: str,
        *,
        status: typing.Optional[VersionStatus] = None,
        include_datapoints: typing.Optional[typing.Literal["latest_committed"]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListDatasets:
        """
        Get a list of the versions for a Dataset.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        status : typing.Optional[VersionStatus]
            Filter versions by status: 'uncommitted', 'committed'. If no status is provided, all versions are returned.

        include_datapoints : typing.Optional[typing.Literal["latest_committed"]]
            If set to 'latest_committed', include the Datapoints for the latest committed version. Defaults to `None`.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListDatasets
            Successful Response

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.datasets.list_versions(
                id="ds_b0baF1ca7652",
                status="committed",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/versions",
            method="GET",
            params={
                "status": status,
                "include_datapoints": include_datapoints,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ListDatasets,
                    construct_type(
                        type_=ListDatasets,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def commit(
        self, id: str, version_id: str, *, commit_message: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DatasetResponse:
        """
        Commit a version of the Dataset with a commit message.

        If the version is already committed, an exception will be raised.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        version_id : str
            Unique identifier for the specific version of the Dataset.

        commit_message : str
            Message describing the changes made.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetResponse
            Successful Response

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.datasets.commit(
                id="ds_b0baF1ca7652",
                version_id="dsv_6L78pqrdFi2xa",
                commit_message="initial commit",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/versions/{jsonable_encoder(version_id)}/commit",
            method="POST",
            json={
                "commit_message": commit_message,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DatasetResponse,
                    construct_type(
                        type_=DatasetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_dataset_version(
        self, id: str, version_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a version of the Dataset.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        version_id : str
            Unique identifier for the specific version of the Dataset.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.datasets.delete_dataset_version(
                id="id",
                version_id="version_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/versions/{jsonable_encoder(version_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def upload_csv(
        self,
        id: str,
        *,
        file: core.File,
        commit_message: str,
        version_id: typing.Optional[str] = None,
        environment: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DatasetResponse:
        """
        Add Datapoints from a CSV file to a Dataset.

        This will create a new committed version of the Dataset with the Datapoints from the CSV file.

        If either `version_id` or `environment` is provided, the new version will be based on the specified version,
        with the Datapoints from the CSV file added to the existing Datapoints in the version.
        If neither `version_id` nor `environment` is provided, the new version will be based on the version
        of the Dataset that is deployed to the default Environment.

        Parameters
        ----------
        id : str
            Unique identifier for the Dataset

        file : core.File
            See core.File for more documentation

        commit_message : str
            Commit message for the new Dataset version.

        version_id : typing.Optional[str]
            ID of the specific Dataset version to base the created Version on.

        environment : typing.Optional[str]
            Name of the Environment identifying a deployed Version to base the created Version on.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetResponse
            Successful Response

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.datasets.upload_csv(
                id="id",
                commit_message="commit_message",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/datapoints/csv",
            method="POST",
            params={
                "version_id": version_id,
                "environment": environment,
            },
            data={
                "commit_message": commit_message,
            },
            files={
                "file": file,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DatasetResponse,
                    construct_type(
                        type_=DatasetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def set_deployment(
        self, id: str, environment_id: str, *, version_id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> DatasetResponse:
        """
        Deploy Dataset to Environment.

        Set the deployed version for the specified Environment.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        environment_id : str
            Unique identifier for the Environment to deploy the Version to.

        version_id : str
            Unique identifier for the specific version of the Dataset.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DatasetResponse
            Successful Response

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.datasets.set_deployment(
                id="ds_b0baF1ca7652",
                environment_id="staging",
                version_id="dsv_6L78pqrdFi2xa",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/environments/{jsonable_encoder(environment_id)}",
            method="POST",
            params={
                "version_id": version_id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DatasetResponse,
                    construct_type(
                        type_=DatasetResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def remove_deployment(
        self, id: str, environment_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Remove deployed Dataset from Environment.

        Remove the deployed version for the specified Environment.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        environment_id : str
            Unique identifier for the Environment to remove the deployment from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.datasets.remove_deployment(
                id="ds_b0baF1ca7652",
                environment_id="staging",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/environments/{jsonable_encoder(environment_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_environments(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[FileEnvironmentResponse]:
        """
        List all Environments and their deployed versions for the Dataset.

        Parameters
        ----------
        id : str
            Unique identifier for Dataset.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[FileEnvironmentResponse]
            Successful Response

        Examples
        --------
        import asyncio

        from humanloop import AsyncHumanloop

        client = AsyncHumanloop(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.datasets.list_environments(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"datasets/{jsonable_encoder(id)}/environments",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[FileEnvironmentResponse],
                    construct_type(
                        type_=typing.List[FileEnvironmentResponse],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
