# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pagination import AsyncPager, SyncPager
from ..core.request_options import RequestOptions
from ..types.log_response import LogResponse
from ..types.version_status import VersionStatus
from .raw_client import AsyncRawLogsClient, RawLogsClient


class LogsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawLogsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawLogsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawLogsClient
        """
        return self._raw_client

    def list(
        self,
        *,
        file_id: str,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        version_id: typing.Optional[str] = None,
        version_status: typing.Optional[VersionStatus] = None,
        id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        search: typing.Optional[str] = None,
        metadata_search: typing.Optional[str] = None,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        include_parent: typing.Optional[bool] = None,
        in_trace_filter: typing.Optional[typing.Union[bool, typing.Sequence[bool]]] = None,
        sample: typing.Optional[int] = None,
        include_trace_children: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[LogResponse]:
        """
        List all Logs for the given filter criteria.

        Parameters
        ----------
        file_id : str
            Unique identifier for the File to list Logs for.

        page : typing.Optional[int]
            Page number for pagination.

        size : typing.Optional[int]
            Page size for pagination. Number of Logs to fetch.

        version_id : typing.Optional[str]
            If provided, only Logs belonging to the specified Version will be returned.

        version_status : typing.Optional[VersionStatus]
            If provided, only Logs belonging to Versions with the specified status will be returned.

        id : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            If provided, returns Logs whose IDs contain any of the specified values as substrings.

        search : typing.Optional[str]
            If provided, only Logs that contain the provided string in its inputs and output will be returned.

        metadata_search : typing.Optional[str]
            If provided, only Logs that contain the provided string in its metadata will be returned.

        start_date : typing.Optional[dt.datetime]
            If provided, only Logs created after the specified date will be returned.

        end_date : typing.Optional[dt.datetime]
            If provided, only Logs created before the specified date will be returned.

        include_parent : typing.Optional[bool]
            If true, include the full parent Log in the response. Only applicable when retrieving Evaluator Logs.

        in_trace_filter : typing.Optional[typing.Union[bool, typing.Sequence[bool]]]
            If true, return Logs that are associated to a Trace. False, return Logs that are not associated to a Trace.

        sample : typing.Optional[int]
            If provided, limit the response to a random subset of logs from the filtered results. (This will be an approximate sample, not a strict limit.)

        include_trace_children : typing.Optional[bool]
            If true, populate `trace_children` for the retrieved Logs. Only applicable when retrieving Flow Logs.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[LogResponse]
            Successful Response

        Examples
        --------
        from humanloop import Humanloop
        client = Humanloop(api_key="YOUR_API_KEY", )
        response = client.logs.list(file_id='file_123abc', size=1, )
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        response = self._raw_client.list(
            file_id=file_id,
            page=page,
            size=size,
            version_id=version_id,
            version_status=version_status,
            id=id,
            search=search,
            metadata_search=metadata_search,
            start_date=start_date,
            end_date=end_date,
            include_parent=include_parent,
            in_trace_filter=in_trace_filter,
            sample=sample,
            include_trace_children=include_trace_children,
            request_options=request_options,
        )
        return response.data

    def delete(
        self,
        *,
        id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete Logs with the given IDs.

        Parameters
        ----------
        id : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Unique identifiers for the Logs to delete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from humanloop import Humanloop
        client = Humanloop(api_key="YOUR_API_KEY", )
        client.logs.delete(id='prv_Wu6zx1lAWJRqOyL8nWuZk', )
        """
        response = self._raw_client.delete(id=id, request_options=request_options)
        return response.data

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> LogResponse:
        """
        Retrieve the Log with the given ID.

        Parameters
        ----------
        id : str
            Unique identifier for Log.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LogResponse
            Successful Response

        Examples
        --------
        from humanloop import Humanloop
        client = Humanloop(api_key="YOUR_API_KEY", )
        client.logs.get(id='prv_Wu6zx1lAWJRqOyL8nWuZk', )
        """
        response = self._raw_client.get(id, request_options=request_options)
        return response.data


class AsyncLogsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawLogsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawLogsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawLogsClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        file_id: str,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        version_id: typing.Optional[str] = None,
        version_status: typing.Optional[VersionStatus] = None,
        id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        search: typing.Optional[str] = None,
        metadata_search: typing.Optional[str] = None,
        start_date: typing.Optional[dt.datetime] = None,
        end_date: typing.Optional[dt.datetime] = None,
        include_parent: typing.Optional[bool] = None,
        in_trace_filter: typing.Optional[typing.Union[bool, typing.Sequence[bool]]] = None,
        sample: typing.Optional[int] = None,
        include_trace_children: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[LogResponse]:
        """
        List all Logs for the given filter criteria.

        Parameters
        ----------
        file_id : str
            Unique identifier for the File to list Logs for.

        page : typing.Optional[int]
            Page number for pagination.

        size : typing.Optional[int]
            Page size for pagination. Number of Logs to fetch.

        version_id : typing.Optional[str]
            If provided, only Logs belonging to the specified Version will be returned.

        version_status : typing.Optional[VersionStatus]
            If provided, only Logs belonging to Versions with the specified status will be returned.

        id : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            If provided, returns Logs whose IDs contain any of the specified values as substrings.

        search : typing.Optional[str]
            If provided, only Logs that contain the provided string in its inputs and output will be returned.

        metadata_search : typing.Optional[str]
            If provided, only Logs that contain the provided string in its metadata will be returned.

        start_date : typing.Optional[dt.datetime]
            If provided, only Logs created after the specified date will be returned.

        end_date : typing.Optional[dt.datetime]
            If provided, only Logs created before the specified date will be returned.

        include_parent : typing.Optional[bool]
            If true, include the full parent Log in the response. Only applicable when retrieving Evaluator Logs.

        in_trace_filter : typing.Optional[typing.Union[bool, typing.Sequence[bool]]]
            If true, return Logs that are associated to a Trace. False, return Logs that are not associated to a Trace.

        sample : typing.Optional[int]
            If provided, limit the response to a random subset of logs from the filtered results. (This will be an approximate sample, not a strict limit.)

        include_trace_children : typing.Optional[bool]
            If true, populate `trace_children` for the retrieved Logs. Only applicable when retrieving Flow Logs.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[LogResponse]
            Successful Response

        Examples
        --------
        from humanloop import AsyncHumanloop
        import asyncio
        client = AsyncHumanloop(api_key="YOUR_API_KEY", )
        async def main() -> None:
            response = await client.logs.list(file_id='file_123abc', size=1, )
            async for item in response:
                yield item

            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page
        asyncio.run(main())
        """
        response = await self._raw_client.list(
            file_id=file_id,
            page=page,
            size=size,
            version_id=version_id,
            version_status=version_status,
            id=id,
            search=search,
            metadata_search=metadata_search,
            start_date=start_date,
            end_date=end_date,
            include_parent=include_parent,
            in_trace_filter=in_trace_filter,
            sample=sample,
            include_trace_children=include_trace_children,
            request_options=request_options,
        )
        return response.data

    async def delete(
        self,
        *,
        id: typing.Optional[typing.Union[str, typing.Sequence[str]]] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> None:
        """
        Delete Logs with the given IDs.

        Parameters
        ----------
        id : typing.Optional[typing.Union[str, typing.Sequence[str]]]
            Unique identifiers for the Logs to delete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from humanloop import AsyncHumanloop
        import asyncio
        client = AsyncHumanloop(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.logs.delete(id='prv_Wu6zx1lAWJRqOyL8nWuZk', )
        asyncio.run(main())
        """
        response = await self._raw_client.delete(id=id, request_options=request_options)
        return response.data

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> LogResponse:
        """
        Retrieve the Log with the given ID.

        Parameters
        ----------
        id : str
            Unique identifier for Log.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LogResponse
            Successful Response

        Examples
        --------
        from humanloop import AsyncHumanloop
        import asyncio
        client = AsyncHumanloop(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.logs.get(id='prv_Wu6zx1lAWJRqOyL8nWuZk', )
        asyncio.run(main())
        """
        response = await self._raw_client.get(id, request_options=request_options)
        return response.data
